/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const PaniDloLazyImport = createFileRoute('/pani-dlo')()
const MentionsLegalesLazyImport = createFileRoute('/mentions-legales')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const PaniDloLazyRoute = PaniDloLazyImport.update({
  id: '/pani-dlo',
  path: '/pani-dlo',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pani-dlo.lazy').then((d) => d.Route))

const MentionsLegalesLazyRoute = MentionsLegalesLazyImport.update({
  id: '/mentions-legales',
  path: '/mentions-legales',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/mentions-legales.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/mentions-legales': {
      id: '/mentions-legales'
      path: '/mentions-legales'
      fullPath: '/mentions-legales'
      preLoaderRoute: typeof MentionsLegalesLazyImport
      parentRoute: typeof rootRoute
    }
    '/pani-dlo': {
      id: '/pani-dlo'
      path: '/pani-dlo'
      fullPath: '/pani-dlo'
      preLoaderRoute: typeof PaniDloLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/mentions-legales': typeof MentionsLegalesLazyRoute
  '/pani-dlo': typeof PaniDloLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/mentions-legales': typeof MentionsLegalesLazyRoute
  '/pani-dlo': typeof PaniDloLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/mentions-legales': typeof MentionsLegalesLazyRoute
  '/pani-dlo': typeof PaniDloLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/mentions-legales' | '/pani-dlo'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/mentions-legales' | '/pani-dlo'
  id: '__root__' | '/' | '/mentions-legales' | '/pani-dlo'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MentionsLegalesLazyRoute: typeof MentionsLegalesLazyRoute
  PaniDloLazyRoute: typeof PaniDloLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MentionsLegalesLazyRoute: MentionsLegalesLazyRoute,
  PaniDloLazyRoute: PaniDloLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/mentions-legales",
        "/pani-dlo"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/mentions-legales": {
      "filePath": "mentions-legales.lazy.tsx"
    },
    "/pani-dlo": {
      "filePath": "pani-dlo.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
